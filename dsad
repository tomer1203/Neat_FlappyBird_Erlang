[1mdiff --git a/src/Constants.hrl b/src/Constants.hrl[m
[1mindex c1f10dc..5b7c583 100644[m
[1m--- a/src/Constants.hrl[m
[1m+++ b/src/Constants.hrl[m
[36m@@ -10,11 +10,11 @@[m
 [m
 %% CONSTANTS %%[m
 % Node Communication Constants %[m
[31m--define(GRAPHICS_NODE, 'pc1@tomer-VirtualBox').[m
[31m--define(PC1, 'pc1@tomer-VirtualBox').[m
[31m--define(PC2, 'pc1@tomer-VirtualBox').[m
[31m--define(PC3, 'pc1@tomer-VirtualBox').[m
[31m--define(PC4, 'pc1@tomer-VirtualBox'). %132.72.104.[m
[32m+[m[32m-define(GRAPHICS_NODE, 'pc1@omri-VirtualBox').[m
[32m+[m[32m-define(PC1, 'pc1@omri-VirtualBox').[m
[32m+[m[32m-define(PC2, 'pc1@omri-VirtualBox').[m
[32m+[m[32m-define(PC3, 'pc1@omri-VirtualBox').[m
[32m+[m[32m-define(PC4, 'pc1@omri-VirtualBox'). %132.72.104.[m
 [m
 % World Constants %[m
 % these are not really used since the more accurate measurement is the actual graphics size[m
[1mdiff --git a/src/graphics.erl b/src/graphics.erl[m
[1mindex 300eaf1..1c740dd 100644[m
[1m--- a/src/graphics.erl[m
[1m+++ b/src/graphics.erl[m
[36m@@ -43,14 +43,16 @@[m [minitialize_system(N,Pipes)->[m
     {ok,Learning_pid} =  learningFSM:start_link(length(PC_List),PC_List,Pc_to_EtsAtom,N),[m
     % TODO: This will need to change to rpc call later[m
     pc_server:start(pc1,1,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom),[m
[31m-    pc_server:start(pc2,2,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom),[m
[31m-    pc_server:start(pc3,3,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom),[m
[31m-    pc_server:start(pc4,4,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom),[m
[31m-%%    [pc_server:start(Pc,Pc_num,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom)|| {Pc,Pc_num}<-PC_List2],[m
[31m-    rpc:call(?PC1, pc_server,pc_rpc,[pc1,{start_simulation,self(),Pipes}]),[m
[31m-    rpc:call(?PC2, pc_server,pc_rpc,[pc2,{start_simulation,self(),Pipes}]),[m
[31m-    rpc:call(?PC3, pc_server,pc_rpc,[pc3,{start_simulation,self(),Pipes}]),[m
[31m-    rpc:call(?PC4, pc_server,pc_rpc,[pc4,{start_simulation,self(),Pipes}]).[m
[32m+[m[32m%%    pc_server:start(pc4,4,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom),[m
[32m+[m[32m%%    pc_server:start(pc2,2,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom),[m
[32m+[m[32m%%    pc_server:start(pc3,3,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom),[m
[32m+[m[32m%%%%    [pc_server:start(Pc,Pc_num,Learning_pid,round(N/length(PC_List)),2,5,PC_List,Pc_to_EtsAtom)|| {Pc,Pc_num}<-PC_List2],[m
[32m+[m[32m    rpc:call(?PC1, pc_server,pc_rpc,[pc1,{start_simulation,self(),Pipes}]).[m
[32m+[m[32m%%    rpc:call(?PC2, pc_server,pc_rpc,[pc2,{start_simulation,self(),Pipes}]),[m
[32m+[m[32m%%    rpc:call(?PC3, pc_server,pc_rpc,[pc3,{start_simulation,self(),Pipes}]),[m
[32m+[m[32m%%    rpc:call(?PC4, pc_server,pc_rpc,[pc4,{start_simulation,self(),Pipes}]).[m
[32m+[m
[32m+[m
 %%    rpc:call(?PC1, pc_server,pc_server:pc_rpc(pc2,{start_simulation,self(),Pipes}))[m
 %%    [rpc:call(?PC1, pc_server,pc_server:pc_rpc(Pc,{start_simulation,self(),Pipes}))||Pc<-PC_List].[m
 %%    [gen_server:cast(Pc,{start_simulation,self(),Pipes})||Pc<-PC_List].[m
[36m@@ -343,7 +345,7 @@[m [mgraphics_reduce(Bird_list,Frame_number,0,Next_N)->[m
     end;[m
 graphics_reduce(Bird_List,Frame_number,N,Next_N)->[m
     receive[m
[31m-        {bird_update,_From,Frame_number,{Collide,Bird_graphics}}->[m
[32m+[m[32m        {bird_update,_From,Frame_number,{Collide,Bird_graphics}}-> io:format("receive ~p~n:",[{bird_update,_From,Frame_number,{Collide,Bird_graphics}}]),[m
             %io:format("received message from: ~p frame count: ~p left to receive:~p~n",[_From,Frame_number,N]),[m
             New_Birdlist = [{Collide,Bird_graphics}|Bird_List],[m
             case Collide of[m
